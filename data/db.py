import logging
import psycopg2

from config import HOST, POSTGRESQL_USER, POSTGRESQL_PASSWORD, DATABASE

logger = logging.getLogger("bot.data.db")


class Database:

    def __init__(self):
        self.connection = psycopg2.connect(host=HOST,
                                           user=POSTGRESQL_USER,
                                           password=POSTGRESQL_PASSWORD,
                                           database=DATABASE)

    def new_table_users(self):
        logger.debug('Запуск создания новой таблицы пользователей')
        with self.connection.cursor() as cursor:
            cursor.execute(
                """DROP TABLE IF EXISTS users;
                CREATE TABLE users 
                (
                    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 100000 CACHE 1 ),
                    user_id integer NOT NULL,
                    first_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
                    last_name character varying(50) COLLATE pg_catalog."default",
                    money integer NOT NULL DEFAULT 0,
                    ban integer DEFAULT 0,
                    CONSTRAINT users_pkey PRIMARY KEY (id)
                )
                
                TABLESPACE pg_default;

                ALTER TABLE IF EXISTS public.users
                    OWNER to postgres;"""
            )

    def new_table_check(self):
        logger.debug('Запуск создания новой таблицы оплаты')
        with self.connection.cursor() as cursor:
            cursor.execute(
                """DROP TABLE IF EXISTS public."check";
                   CREATE TABLE IF NOT EXISTS public."check"
                (
                    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 100000 CACHE 1 ),
                    user_id integer NOT NULL,
                    money integer NOT NULL,
                    bill_id character varying COLLATE pg_catalog."default" NOT NULL
                )
                TABLESPACE pg_default;

                ALTER TABLE IF EXISTS public."check"
                    OWNER to postgres;"""
            )

    def user_exists(self, user_id: int):
        logger.info('Функция проверки пользователя на наличие в БД')
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT * FROM users WHERE user_id = %(user_id)s;", {
                    'user_id': user_id,
                }
            )
            return cursor.fetchone()

    def add_user(self, user_id: int, first_name, last_name):
        logger.info('Функция добавления пользователя в БД')
        with self.connection.cursor() as cursor:
            cursor.execute(
                "INSERT INTO users (user_id, first_name, last_name) "
                "VALUES (%(user_id)s, %(first_name)s, %(last_name)s);", {
                    'user_id': user_id,
                    'first_name': first_name,
                    'last_name': last_name,
                }
            )
            self.connection.commit()

    def block_user(self, user_id: int, ban: int):
        logger.info('Функция блокирования пользователя')
        with self.connection.cursor() as cursor:
            cursor.execute(
                f"UPDATE users SET ban = '{ban}' WHERE user_id = {user_id};"
            )
            self.connection.commit()

    def all_users(self):
        logger.info('Функция выгрузки всех пользователей в БД')
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT * FROM users"
            )
            result = cursor.fetchall()
            return result

    def user_money(self, user_id):
        logger.info('Функция просмотра баланса пользователя')
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT money FROM users WHERE user_id = %(user_id)s;", {
                    'user_id': user_id,
                }
            )
            result = cursor.fetchmany(1)
            return int(result[0][0])

    def set_money(self, user_id: int, money):
        logger.info('Функция обновления баланса пользователя')
        with self.connection.cursor() as cursor:
            cursor.execute(
                "UPDATE users SET money = %(money)s WHERE user_id = %(user_id)s;", {
                    'money': money,
                    'user_id': user_id,
                }
            )
            self.connection.commit()

    def add_check(self, user_id, money, bill_id):
        logger.info('Функция добавления платежа в БД')
        with self.connection.cursor() as cursor:
            cursor.execute(
                "INSERT INTO public.check (user_id, money, bill_id) "
                "VALUES (%(user_id)s, %(money)s, %(bill_id)s);", {
                    'user_id': user_id,
                    'money': money,
                    'bill_id': bill_id,
                }
            )
            self.connection.commit()

    def get_check(self, bill_id):
        logger.info('Функция проверки платежа в БД')
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT * FROM public.check WHERE bill_id = %(bill_id)s;", {
                    'bill_id': bill_id,
                }
            )
            result = cursor.fetchmany(1)
            if not bool(len(result)):
                return False
            return result[0]

    def delete_check(self,  bill_id):
        logger.info('Функция удаления платежа из БД')
        with self.connection.cursor() as cursor:
            cursor.execute(
                "DELETE FROM public.check WHERE bill_id = %(bill_id)s;", {
                    'bill_id': bill_id,
                }
            )
            self.connection.commit()


db_obj = Database()
db_obj.new_table_users()
db_obj.new_table_check()
